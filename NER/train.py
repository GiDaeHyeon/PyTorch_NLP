from pytorch_lightning import Trainerfrom pytorch_lightning.loggers import TensorBoardLoggerfrom pytorch_lightning.callbacks.early_stopping import EarlyStoppingfrom pytorch_lightning.callbacks import ModelCheckpointfrom pytorch_lightning.plugins import DDPPluginfrom trainmodule import NERTrainModulefrom datamodule import NERDataModuleimport argparseparser = argparse.ArgumentParser(description='Name Entity Recognition')parser.add_argument('--log_dir',                    help="dataset's directory",                    default='./logs', type=str)parser.add_argument('--ckpt_dir',                    help="dataset's directory", type=str,                    default='./CKPT')args = parser.parse_args()logger = TensorBoardLogger(    save_dir=args.log_dir,    name='NER',    default_hp_metric=False)checkpoint_callback = ModelCheckpoint(    monitor='Accuracy',    dirpath=args.ckpt_dir,    filename=args.log_dir,    mode='max')early_stop_callback = EarlyStopping(    monitor='Accuracy',    min_delta=1e-4,    patience=5,    verbose=False,    mode='max')trainer = Trainer(max_epochs=10,                  logger=logger,                  gradient_clip_val=3.,                  gradient_clip_algorithm='norm',                  callbacks=[early_stop_callback,                             checkpoint_callback])if __name__ == '__main__':    datamodule = NERDataModule()    model = NERTrainModule()    trainer.fit(model=model, datamodule=datamodule)