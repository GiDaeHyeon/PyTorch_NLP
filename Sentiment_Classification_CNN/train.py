from pytorch_lightning import Trainerfrom pytorch_lightning.loggers import TensorBoardLoggerfrom pytorch_lightning.callbacks.early_stopping import EarlyStoppingfrom pytorch_lightning.callbacks import ModelCheckpointfrom pytorch_lightning.plugins import DDPPluginfrom dataloader import NMSCtorchtextDataModulefrom model import CNNClassifierfrom network import Classifierimport argparse# TODO argparse 추가parser = argparse.ArgumentParser(description='Naver Movie Review dataset Classification')parser.add_argument('--data_directory',                    help="dataset's directory",                    default='./dataset', type=str)args = parser.parse_args()logger = TensorBoardLogger(    save_dir=args.log_dir,    name=args.log_name,    default_hp_metric=False)checkpoint_callback = ModelCheckpoint(    monitor='Accuracy',    dirpath=args.ckpt_dir,    filename=args.ckpt_name,    mode='max')early_stop_callback = EarlyStopping(    monitor='Accuracy',    min_delta=1e-4,    patience=5,    verbose=False,    mode='max')trainer = Trainer(max_epochs=args.max_epochs,                  logger=logger,                  gpus=args.gpus,                  accelerator='ddp',                  gradient_clip_val=3.,                  gradient_clip_algorithm='norm',                  plugins=DDPPlugin(find_unused_parameters=False),                  callbacks=[early_stop_callback,                             checkpoint_callback])if __name__ == '__main__':    datamodule = NMSCtorchtextDataModule()    n_words = datamodule.vocab_size    model = CNNClassifier(n_words=n_words)    classifier = Classifier()    trainer.fit(model=classifier, datamodule=datamodule)